"""Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."""

# See other files for solutions with comments. Just testing the efficiency here

import timeit

first_try_code = """
fib_series = [1, 2]
while fib_series[-1] < 10**1000:
  a = fib_series[-1] + fib_series[-2]
  if a < 10**1000:
    fib_series.append(a)
  else:
    break
even_fibs = sum(i for i in fib_series if i % 2 == 0)
print(even_fibs)
"""

optimised_code = """
num1 = 1
num2 = 2
total = 0
while num1 < 10**1000:
  if num1 % 2 == 0:
    total += num1
  if num2 % 2 == 0 and num2 < 10**1000:
    total += num2
  num1 += num2
  num2 += num1
print(total)
"""

first_try_time = timeit.timeit(first_try_code, number=100)/100
optimised_time = timeit.timeit(first_try_code, number=100)/100

print("Time taken for the first try code was {:.6f}s".format(first_try_time))
print("Time taken for the optimised code was {:.6f}s".format(optimised_time))

difference = first_try_time / optimised_time

print("The optimised code was {:.2f}x faster than the first try code".format(
    difference))
